From 254e0863df23c504b05619b46f72a123dd6b79b0 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <ifernando@quansight.com>
Date: Wed, 18 Dec 2024 03:59:00 +0000
Subject: [PATCH] Use BLAS_USE_CBLAS_DOT for OpenBLAS builds

There are two calling conventions for *dotu functions

Result using pointer:

  void cdotu_ (openblas_complex_float *, blasint *, float  *, blasint *, float  *,  blasint *);

Result using return value:

  openblas_complex_float cdotu_ (blasint *, float  *, blasint *, float  *,  blasint *);

MKL uses the former and OpenBLAS uses the latter by default.
(There's a configuration option for openblas to do the former)
When BLAS was pure Fortran, these calling conventions depended
on the Fortran compiler.

The CBLAS API is more well behaved and has `cblas_cdotu_sub`
which returns using pointer (as the last arg instead of first arg)
and `cblas_cdotu` returns using the return value.

The workaround for openblas is to use the CBLAS API. This also
assists with the BLAS switching mechanism as we are not relying on
a particular `cdotu` implementation with the cost of two additional
functional calls.
---
 cmake/Dependencies.cmake | 1 +
 1 file changed, 1 insertion(+)

diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 1813f4418a2..918820af2c5 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -181,6 +181,7 @@ elseif(BLAS STREQUAL "OpenBLAS")
   set(BLAS_INFO "open")
   set(BLAS_FOUND 1)
   set(BLAS_LIBRARIES ${OpenBLAS_LIB})
+  set(BLAS_USE_CBLAS_DOT TRUE)
 elseif(BLAS STREQUAL "BLIS")
   find_package(BLIS REQUIRED)
   include_directories(SYSTEM ${BLIS_INCLUDE_DIR})
-- 
2.34.1

