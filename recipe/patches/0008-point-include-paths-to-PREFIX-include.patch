From c9810cb1782fa4ad103182da896eaa2b21b95120 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Thu, 23 Jan 2025 22:58:14 +1100
Subject: [PATCH 08/15] point include paths to $PREFIX/include

---
 torch/utils/cpp_extension.py | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/torch/utils/cpp_extension.py b/torch/utils/cpp_extension.py
index 7fa5237994e..8a1bd5da3de 100644
--- a/torch/utils/cpp_extension.py
+++ b/torch/utils/cpp_extension.py
@@ -1495,10 +1495,28 @@ def include_paths(device_type: str = "cpu") -> list[str]:
         A list of include path strings.
     """
     lib_include = os.path.join(_TORCH_PATH, 'include')
+    if (os.environ.get("CONDA_BUILD", None) is not None
+            and os.environ.get("CONDA_BUILD_CROSS_COMPILATION", None) not in (None, "", "0")):
+        # to avoid problems in cross-compilation, we need to point to the same environment
+        # where the currently running pytorch is -- i.e. the BUILD_PREFIX. See
+        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/349
+        pieces = [os.environ["BUILD_PREFIX"]] + IS_WINDOWS * ["Library"] + ["include"]
+        lib_include = os.path.join(*pieces)
+    elif os.environ.get("CONDA_BUILD", None) is not None:
+        # regular build (& testing) phase --> PREFIX is set
+        pieces = [os.environ["PREFIX"]] + IS_WINDOWS * ["Library"] + ["include"]
+        lib_include = os.path.join(*pieces)
+    elif os.environ.get("CONDA_PREFIX", None) is not None:
+        # final environment
+        pieces = [os.environ["CONDA_PREFIX"]] + IS_WINDOWS * ["Library"] + ["include"]
+        lib_include = os.path.join(*pieces)
     paths = [
         lib_include,
         # Remove this once torch/torch.h is officially no longer supported for C++ extensions.
         os.path.join(lib_include, 'torch', 'csrc', 'api', 'include'),
+        # add site-packages/torch/include again (`lib_include` may have been pointing to
+        # $PREFIX/include), as some torch-internal headers are still in this directory
+        os.path.join(_TORCH_PATH, 'include'),
     ]
     if device_type == "cuda" and IS_HIP_EXTENSION:
         paths.append(os.path.join(lib_include, 'THH'))
