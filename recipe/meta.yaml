{% set version = "1.12.1" %}
{% set number = 1 %}

{% if cuda_compiler_version != "None" %}
{% set number = number + 200 %}
{% endif %}

package:
  name: pytorch-recipe
  version: {{ version }}

source:
  # for local testing use a tarball including submodules
  git_url: https://github.com/pytorch/pytorch.git
  git_tag: v{{ version }}
  patches:
    - patches/fix_dispatch_apply_auto.patch
    # While this next patch has been accepted upstream, it doesn't seem to have
    # made it for the 1.12.0 release
    # https://github.com/pytorch/pytorch/pull/78883
    - patches/link_blas_privately.patch
    - patches/osx-map_anonymous.patch
    - patches/75001-fix_USE_MKLDNN.patch
    # 2022/07 hmaarrfk
    # We've patch out the bug in GCC that makes it incompatible
    # https://github.com/conda-forge/ctng-compilers-feedstock/blob/7ea10c2526445beb9faff23efcc6bc40fc0079b5/recipe/meta.yaml#L23=
    - patches/remove_gcc_maximum_requirements.patch 

build:
  number: {{ number }}
  skip: true  # [win]

outputs:
  - name: pytorch
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                # [cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: false
      run_exports:
        - {{ pin_subpackage('pytorch', max_pin='x.x') }}
    script: build_pytorch.sh  # [not win]
    script: bld_pytorch.bat   # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - cffi                                   # [build_platform != target_platform]
        - sysroot_linux-64  2.17  # [linux64]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}    # [cuda_compiler_version != "None"]
        # Dec 2020: it seems that git is broken on windows, so we use m2-git
        - patch     # [not win]
        - m2-patch  # [win]
        - git       # [not win]
        - m2-git    # [win]
        - libgomp   # [linux]
        - llvm-openmp    # [osx]
        # 2022/04/12 hmaarrfk
        # Issues with recent version of CMake
        # https://github.com/pytorch/pytorch/issues/74985
        # Should be fixed in other versions
        # https://gitlab.kitware.com/cmake/cmake/-/issues/23368
        - cmake  != 3.23.0
        - ninja
        # Keep libprotobuf here so that a compatibile version
        # of protobuf is installed between build and host
        - libprotobuf
        - protobuf
        - make      # [linux]
      host:
        # GPU requirements
        - cudnn                           # [cuda_compiler_version != "None"]
        - nccl                            # [cuda_compiler_version != "None"]
        - magma                           # [cuda_compiler_version != "None"]
        # other requirements
        - python
        - numpy
        - pip
        - setuptools
        - pyyaml
        - requests
        - future
        - six
        - cffi
        - mkl-devel {{ mkl }}   # [x86]
        - libcblas * *_mkl      # [x86]
        - libcblas              # [not x86]
        - liblapack             # [not x86]
        - openblas              # [not x86]
        - libprotobuf
        - sleef
        - typing
        - libuv
        - pkg-config  # [unix]
        - typing_extensions
      run:
        - llvm-openmp    # [osx]
        # GPU requirements without run_exports
        - {{ pin_compatible('cudnn') }}                       # [cuda_compiler_version != "None"]
        - {{ pin_compatible('magma', max_pin='x.x.x') }}      # [cuda_compiler_version != "None"]
        # other requirements
        - python
        - {{ pin_compatible('numpy') }}
        - setuptools
        - cffi
        - typing_extensions
        # Need ninja to load C++ extensions
        - ninja
        # avoid that people without GPUs needlessly download ~0.5-1GB
        - __cuda  # [cuda_compiler_version != "None"]
      run_constrained:
        # These constraints ensure conflict between pytorch and
        # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure
        # built into place.
        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65
        - pytorch-cpu = {{ version }}  # [cuda_compiler_version == "None"]
        - pytorch-gpu = 99999999       # [cuda_compiler_version == "None"]
        - pytorch-gpu = {{ version }}  # [cuda_compiler_version != "None"]
        - pytorch-cpu = 99999999       # [cuda_compiler_version != "None"]

    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - hypothesis
        - pytest
        - tabulate
        - pydot
        - mock  # [linux]
        - pip
      imports:
        - torch
      source_files:
        - test
      commands:
        - OMP_NUM_THREADS=4 python ./test/run_test.py || true  # [not win]
        - python ./test/run_test.py  # [win]
        # Run pip check so as to ensure that all pytorch packages are installed
        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/24
        - pip check
        - python -c "import torch; print(torch.__version__)"
        - python -c "import torch; assert torch.backends.mkldnn.m.is_available()"  # [x86 and cuda_compiler_version == "None"]
        # At conda-forge, we target versions of OSX that are too old for MPS support
        # But if users install a newer version of OSX, they will have MPS support
        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/123#issuecomment-1186355073
        # - python -c "import torch; assert torch.backends.mps.is_available()" # [osx]

  # 2021/08/01, hmaarrfk
  # While this seems like a roundabout way of defining the package name
  # It helps the linter avoid errors on a package not having tests.
  {% set pytorch_cpu_gpu = "pytorch-cpu" %}   # [cuda_compiler_version == "None"]
  {% set pytorch_cpu_gpu = "pytorch-gpu" %}   # [cuda_compiler_version != "None"]
  - name: {{ pytorch_cpu_gpu }}
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: False
      # weigh down cpu implementation and give cuda preference
      track_features:
        - pytorch-cpu                                      # [cuda_compiler_version == "None"]
    requirements:
      run:
        - {{ pin_subpackage("pytorch", exact=True) }}
    test:
      imports:
        - torch

about:
  home: https://pytorch.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file:
    - LICENSE
    - NOTICE
    - third_party/pybind11/LICENSE
  summary: PyTorch is an optimized tensor library for deep learning using GPUs and CPUs.

extra:
  recipe-maintainers:
    - hmaarrfk
    - sodre
    - benjaminrwilson
  feedstock-name: pytorch-cpu
