{% set version = "2.5.1" %}
{% set build = 3 %}

{% if cuda_compiler_version != "None" %}
{% set build = build + 200 %}
{% endif %}

{% if blas_impl == "mkl" %}
{% set build = build + 100 %}
{% endif %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% endif %}

package:
  name: libtorch
  version: {{ version }}

source:
  url: https://github.com/pytorch/pytorch/releases/download/v{{ version }}/pytorch-v{{ version }}.tar.gz
  sha256: 740eb5fff95e33cfe699bad43be83523f569c7cc7f9c285c2a255416443dd266
  patches:
    - patches/0003-Force-usage-of-python-3-and-error-without-numpy.patch
    # https://github.com/pytorch/pytorch/pull/137084
    - patches/0004-Help-find-numpy.patch
    # https://github.com/pytorch/pytorch/pull/138287
    - patches/0005-Use-system-nvtx3.patch
    # sympy 1.13.2 was reported to result in test failures on Windows and mac
    # https://github.com/pytorch/pytorch/pull/133235
    - patches/0006-Update-sympy-version.patch
    - patches/0007-Fix-duplicate-linker-script.patch  # [cuda_compiler_version != "None" and aarch64]
    # https://github.com/pytorch/pytorch/pull/136034
    - patches/0008-Fix-pickler-error.patch
    # https://github.com/pytorch/pytorch/pull/137331
    - patches/137331.patch
    # Updated cmake should be included with 2.6.0 release
    # https://github.com/pytorch/pytorch/pull/139258
    - patches/0009-Update-FindSYCLToolkit.patch

build:
  number: {{ build }}
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                 # [cuda_compiler_version == "None" and dpcpp_compiler_version == "None"]
  string: xpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                 # [dpcpp_compiler_version != "None"]
  detect_binary_files_with_prefix: false
  run_exports:
    - {{ pin_subpackage('libtorch', max_pin='x.x') }}
  ignore_run_exports_from:
    - python *                               # [megabuild]
    - numpy *                                # [megabuild]
    - cross-python_{{ target_platform }}     # [megabuild and build_platform != target_platform]
  ignore_run_exports:
    - python *                               # [megabuild]
    - numpy *                                # [megabuild]
  skip: true  # [win]
  skip: true  # [cuda_compiler_version != "None" and linux64 and blas_impl != "mkl"]
  skip: true  # [dpcpp_compiler_version != "None" and (blas_impl != "mkl" or not linux64)]
  # 2024/04 This build seems to fail due to disk space on the CIs
  # We can potentially re-enable it at a later time
  skip: true  # [cuda_compiler_version == "11.8" and aarch64]
  # Prevent compilation using cuda and dpcpp compiler togather. Just a guard.
  skip: true  # [cuda_compiler_version != "None" and dpcpp_compiler_version != "None"]

requirements:
  # Keep this list synchronized (except for python*, numpy*) in outputs
  # We use python to build libtorch as well because it is easier
  build:
    # When you change 3.12 here, change it in build.sh as well
    - python 3.12                            # [megabuild and build_platform != target_platform]
    - python                                 # [not megabuild and build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy  *                               # [megabuild and build_platform != target_platform]
    - numpy                                  # [not megabuild and build_platform != target_platform]
    - {{ stdlib('c') }}
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - nvtx-c                                 # [cuda_compiler_version != "None" and build_platform != target_platform]
    - {{ compiler('dpcpp') }}                # [linux64 and dpcpp_compiler_version != "None"]
    {% if cuda_major >= 12 %}
    - cuda-driver-dev                        # [build_platform != target_platform]
    - cuda-cudart-dev                        # [build_platform != target_platform]
    - cuda-nvrtc-dev                         # [build_platform != target_platform]
    - cuda-nvtx-dev                          # [build_platform != target_platform]
    - cuda-nvml-dev                          # [build_platform != target_platform]
    - cuda-profiler-api                      # [build_platform != target_platform]
    - libcublas-dev                          # [build_platform != target_platform]
    - libcufft-dev                           # [build_platform != target_platform]
    - libcurand-dev                          # [build_platform != target_platform]
    - libcusolver-dev                        # [build_platform != target_platform]
    - libcusparse-dev                        # [build_platform != target_platform]
    {% endif %}
    # Dec 2020: it seems that git is broken on windows, so we use m2-git
    - m2-patch  # [win]
    - m2-git    # [win]
    - patch     # [not win]
    - git       # [not win]
    - libgomp        # [linux]
    - llvm-openmp    # [osx]
    - cmake
    - ninja
    # Keep libprotobuf here so that a compatibile version
    # of protobuf is installed between build and host
    - libprotobuf
    - protobuf
    - make      # [linux]
  host:
    # GPU requirements
    - cudnn                           # [cuda_compiler_version != "None"]
    - nccl                            # [cuda_compiler_version != "None"]
    - magma                           # [cuda_compiler_version != "None"]
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - nvtx-c                          # [cuda_compiler_version != "None"]
    {% if cuda_major >= 12 %}
    - cuda-driver-dev
    - cuda-cudart-dev
    - cuda-nvrtc-dev
    - cuda-nvtx-dev
    - cuda-nvml-dev
    - cuda-profiler-api
    - libcublas-dev
    - libcufft-dev
    - libcurand-dev
    - libcusolver-dev
    - libcusparse-dev
    {% endif %}
    # other requirements
    - python 3.12  # [megabuild]
    - python       # [not megabuild]
    - numpy *      # [megabuild]
    - numpy        # [not megabuild]
    - pip
    - setuptools
    - pyyaml
    - requests
    - future
    - six
    - mkl-devel {{ mkl }}   # [blas_impl == "mkl"]
    # - libcblas * *_mkl      # [blas_impl == "mkl"]
    - libcblas              # [blas_impl != "mkl"]
    - liblapack             # [blas_impl != "mkl"]
    - onemkl-sycl-blas         # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-datafitting  # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-dft          # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-lapack       # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-rng          # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-sparse       # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-stats        # [dpcpp_compiler_version != "None"]
    - onemkl-sycl-vm           # [dpcpp_compiler_version != "None"]
    - intel-opencl-rt          # [dpcpp_compiler_version != "None"]
    - libgomp        # [linux and dpcpp_compiler_version == "None"]
    - llvm-openmp    # [osx or dpcpp_compiler_version != "None"]
    - libabseil
    - libprotobuf
    - sleef
    - typing
    - libuv
    - pkg-config  # [unix]
    - typing_extensions
    - intel-pti  # [dpcpp_compiler_version != "None"]
  run:
    # GPU requirements without run_exports
    - {{ pin_compatible('cudnn') }}                       # [cuda_compiler_version != "None"]
  run_constrained:
    # These constraints ensure conflict between pytorch and
    # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure
    # built into place.
    # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65
    - pytorch-cpu =={{ version }}  # [cuda_compiler_version == "None"]
    - pytorch-gpu ==99999999       # [cuda_compiler_version == "None"]
    - pytorch-gpu =={{ version }}  # [cuda_compiler_version != "None"]
    - pytorch-cpu ==99999999       # [cuda_compiler_version != "None"]
    - pytorch {{ version }} cuda{{ cuda_compiler_version | replace('.', '') }}_*_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
    - pytorch {{ version }} cpu_{{ blas_impl }}_*_{{ PKG_BUILDNUM }}                                 # [cuda_compiler_version == "None"]

# these tests are for the libtorch output below, but due to
# a particularity of conda-build, that output is defined in
# the global build stage, including tests
test:
  commands:
    # libraries
    {% for each_lib in [ 'libc10', 'libshm', 'libtorch', 'libtorch_cpu', 'libtorch_global_deps'] %}
    - test -f $PREFIX/lib/{{ each_lib }}.so     # [linux]
    - test -f $PREFIX/lib/{{ each_lib }}.dylib  # [osx]
    {% endfor %}
    {% for each_lib in ['libc10_cuda', 'libcaffe2_nvrtc', 'libtorch_cuda', 'libtorch_cuda_linalg'] %}
    - test -f $PREFIX/lib/{{ each_lib }}.so     # [linux and cuda_compiler_version != "None"]
    {% endfor %}

outputs:
  - name: libtorch
  - name: pytorch
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                 # [cuda_compiler_version == "None" and dpcpp_compiler_version == "None"]
      string: xpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                 # [dpcpp_compiler_version != "None"]
      detect_binary_files_with_prefix: false
      run_exports:
        - {{ pin_subpackage('pytorch', max_pin='x.x') }}
        - {{ pin_subpackage('libtorch', max_pin='x.x') }}
      skip: true  # [win]
      skip: true  # [cuda_compiler_version != "None" and linux64 and blas_impl != "mkl"]
      skip: true  # [dpcpp_compiler_version != "None" and (blas_impl != "mkl" or not linux64)]
      # Prevent compilation using cuda and dpcpp compiler togather. Just a guard.
      skip: true  # [cuda_compiler_version != "None" and dpcpp_compiler_version != "None"]

    script: build_pytorch.sh   # [unix]
    script: build_pytorch.bat  # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - {{ stdlib('c') }}
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
        - nvtx-c                                 # [cuda_compiler_version != "None" and build_platform != target_platform]
        - {{ compiler('dpcpp') }}                # [dpcpp_compiler_version != "None"]
        {% if cuda_major >= 12 %}
        - cuda-driver-dev                        # [build_platform != target_platform]
        - cuda-cudart-dev                        # [build_platform != target_platform]
        - cuda-nvrtc-dev                         # [build_platform != target_platform]
        - cuda-nvtx-dev                          # [build_platform != target_platform]
        - cuda-nvml-dev                          # [build_platform != target_platform]
        - cuda-profiler-api                      # [build_platform != target_platform]
        - libcublas-dev                          # [build_platform != target_platform]
        - libcufft-dev                           # [build_platform != target_platform]
        - libcurand-dev                          # [build_platform != target_platform]
        - libcusolver-dev                        # [build_platform != target_platform]
        - libcusparse-dev                        # [build_platform != target_platform]
        {% endif %}
        # Dec 2020: it seems that git is broken on windows, so we use m2-git
        - patch     # [not win]
        - m2-patch  # [win]
        - git       # [not win]
        - m2-git    # [win]
        - libgomp   # [linux]
        - llvm-openmp    # [osx]
        - cmake
        - ninja
        # Keep libprotobuf here so that a compatibile version
        # of protobuf is installed between build and host
        - libprotobuf
        - protobuf
        - make      # [linux]
      host:
        # GPU requirements
        - cudnn                           # [cuda_compiler_version != "None"]
        - nccl                            # [cuda_compiler_version != "None"]
        - magma                           # [cuda_compiler_version != "None"]
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
        - nvtx-c                          # [cuda_compiler_version != "None"]
        {% if cuda_major >= 12 %}
        - cuda-driver-dev
        - cuda-cudart-dev
        - cuda-nvrtc-dev
        - cuda-nvtx-dev
        - cuda-nvml-dev
        - cuda-profiler-api
        - libcublas-dev
        - libcufft-dev
        - libcurand-dev
        - libcusolver-dev
        - libcusparse-dev
        {% endif %}
        # other requirements
        - python
        - numpy
        - pip
        - setuptools
        - pyyaml
        - requests
        - future
        - six
        - mkl-devel {{ mkl }}   # [blas_impl == "mkl"]
        # - libcblas * *_mkl      # [blas_impl == "mkl"]
        - libcblas              # [blas_impl != "mkl"]
        - liblapack             # [blas_impl != "mkl"]
        - onemkl-sycl-blas         # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-datafitting  # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-dft          # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-lapack       # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-rng          # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-sparse       # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-stats        # [dpcpp_compiler_version != "None"]
        - onemkl-sycl-vm           # [dpcpp_compiler_version != "None"]
        - intel-opencl-rt          # [dpcpp_compiler_version != "None"]
        - libgomp        # [linux and dpcpp_compiler_version == "None"]
        - llvm-openmp    # [osx or dpcpp_compiler_version != "None"]
        - libabseil
        - libprotobuf
        - sleef
        - typing
        - libuv
        - pkg-config  # [unix]
        - typing_extensions
        - intel-pti  # [dpcpp_compiler_version != "None"]
        - {{ pin_subpackage('libtorch', exact=True) }}
      run:
        - llvm-openmp    # [osx]
        # GPU requirements without run_exports
        - {{ pin_compatible('cudnn') }}                       # [cuda_compiler_version != "None"]
        # other requirements
        - python
        - typing_extensions
        # sympy 1.13.2 was reported to result in test failures on Windows and mac
        # https://github.com/pytorch/pytorch/pull/133235
        - sympy >=1.13.1,!=1.13.2
        - filelock
        - jinja2
        - networkx
        - nomkl                 # [blas_impl != "mkl"]
        - fsspec
        # avoid that people without GPUs needlessly download ~0.5-1GB
        - __cuda  # [cuda_compiler_version != "None"]
        - libtorch {{ version }}
        - setuptools
      run_constrained:
        # These constraints ensure conflict between pytorch and
        # pytorch-cpu 1.1 which we built before conda-forge had GPU infrastructure
        # built into place.
        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/65
        - pytorch-cpu =={{ version }}  # [cuda_compiler_version == "None"]
        - pytorch-gpu ==99999999       # [cuda_compiler_version == "None"]
        - pytorch-gpu =={{ version }}  # [cuda_compiler_version != "None"]
        - pytorch-cpu ==99999999       # [cuda_compiler_version != "None"]

    test:
      requires:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - boto3
        - hypothesis
        - pytest
        - tabulate
        - pydot
        - mock  # [linux]
        - pip
        - expecttest
        - xmlrunner
      imports:
        - torch  # [not (aarch64 and cuda_compiler_version != "None")]
      source_files:
        - test
        # tools/ is needed to optimise test run
        # as of pytorch=2.0.0, there is a bug when trying to run tests without the tools
        - tools
      commands:
        - OMP_NUM_THREADS=4 python ./test/run_test.py || true  # [not win and not (aarch64 and cuda_compiler_version != "None")]
        - python ./test/run_test.py  # [win]
        # Run pip check so as to ensure that all pytorch packages are installed
        # https://github.com/conda-forge/pytorch-cpu-feedstock/issues/24
        - pip check
        - python -c "import torch; print(torch.__version__)"                       # [not (aarch64 and cuda_compiler_version != "None")]
        - python -c "import torch; assert torch.backends.mkldnn.m.is_available()"  # [x86 and cuda_compiler_version == "None"]
        # Running tests on aarch64 + cuda is not supported until we move to Alma Linux 8
        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/267#issuecomment-2387225526
        - python -c "import torch; torch.tensor(1).to('cpu').numpy(); print('numpy support enabled!!!')"
        # At conda-forge, we target versions of OSX that are too old for MPS support
        # But if users install a newer version of OSX, they will have MPS support
        # https://github.com/conda-forge/pytorch-cpu-feedstock/pull/123#issuecomment-1186355073
        # - python -c "import torch; assert torch.backends.mps.is_available()" # [osx]
        - test -f $PREFIX/lib/libtorch_python${SHLIB_EXT}     # [unix]

  # 2021/08/01, hmaarrfk
  # While this seems like a roundabout way of defining the package name
  # It helps the linter avoid errors on a package not having tests.
  {% set pytorch_cpu_gpu = "pytorch-cpu" %}   # [cuda_compiler_version == "None"]
  {% set pytorch_cpu_gpu = "pytorch-gpu" %}   # [cuda_compiler_version != "None"]
  - name: {{ pytorch_cpu_gpu }}
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                  # [megabuild and cuda_compiler_version != "None"]
      string: cpu_{{ blas_impl }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                # [megabuild and cuda_compiler_version == "None"]
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [not megabuild and cuda_compiler_version != "None"]
      string: cpu_{{ blas_impl }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                # [not megabuild and cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: false
      skip: true  # [cuda_compiler_version != "None" and linux64 and blas_impl != "mkl"]
      # weigh down cpu implementation and give cuda preference
      track_features:
        - pytorch-cpu                                      # [cuda_compiler_version == "None"]
    requirements:
      run:
        - pytorch {{ version }}=cuda*{{ PKG_BUILDNUM }}                   # [megabuild and cuda_compiler_version != "None"]
        - pytorch {{ version }}=cpu_{{ blas_impl }}*{{ PKG_BUILDNUM }}    # [megabuild and cuda_compiler_version == "None"]
        - {{ pin_subpackage("pytorch", exact=True) }}                     # [not megabuild]
    test:
      imports:
        - torch

about:
  home: https://pytorch.org/
  dev_url: https://github.com/pytorch/pytorch
  license: BSD-3-Clause
  license_family: BSD
  license_file:
    - LICENSE
    - NOTICE
    - third_party/pybind11/LICENSE
  summary: PyTorch is an optimized tensor library for deep learning using GPUs and CPUs.

extra:
  recipe-maintainers:
    - jeongseok-meta
    - hmaarrfk
    - sodre
    - benjaminrwilson
    - Tobias-Fischer
    - beckermr
  feedstock-name: pytorch-cpu
